# ADB makefile
# ------------

#TODO change TOOLCHAIN variable to your toolchain path 
TOOLCHAIN=
CC= $(TOOLCHAIN)gcc
LD= $(TOOLCHAIN)gcc
AR= $(TOOLCHAIN)ar
CXX=$(TOOLCHAIN)g++

LOCAL_PATH:= $(shell pwd)


LIBBASE_PATH := $(LOCAL_PATH)/../base

LIBBASE_SRC_FILES := \
    $(LIBBASE_PATH)/file.cpp \
    $(LIBBASE_PATH)/logging.cpp \
    $(LIBBASE_PATH)/parsenetaddress.cpp \
    $(LIBBASE_PATH)/stringprintf.cpp \
    $(LIBBASE_PATH)/strings.cpp \
    $(LIBBASE_PATH)/test_utils.cpp \

libbase_linux_src_files := \
    $(LIBBASE_PATH)/errors_unix.cpp \

LIBBASE_SRC := $(LIBBASE_SRC_FILES) \
    $(libbase_linux_src_files)

libbase_cppflags := \
    -Wall \
    -Wextra \

CPPFLAGS := $(libbase_cppflags) \
    -I. \
    -I../base/include \

LIBBASE_OBJS := $(LIBBASE_SRC:.cpp=.o)

libbase: $(LIBBASE_OBJS)
	$(AR) -crv $@.a $(LIBBASE_OBJS)


adb_version := $(shell git -C $(LOCAL_PATH) rev-parse --short=12 HEAD 2>/dev/null)-android

ADB_COMMON_CFLAGS := \
    -Wall -Wextra \
    -Wno-unused-parameter \
    -Wno-missing-field-initializers \
    -Wvla \
    -DADB_REVISION='"$(adb_version)"' \

ADB_COMMON_linux_CFLAGS := \
    -std=c++14 \

# libadb
# =========================================================

# Much of adb is duplicated in bootable/recovery/minadb and fastboot. Changes
# made to adb rarely get ported to the other two, so the trees have diverged a
# bit. We'd like to stop this because it is a maintenance nightmare, but the
# divergence makes this difficult to do all at once. For now, we will start
# small by moving common files into a static library. Hopefully some day we can
# get enough of adb in here that we no longer need minadb. https://b/17626262
LIBADB_SRC_FILES := \
    adb.cpp \
    adb_auth.cpp \
    adb_io.cpp \
    adb_listeners.cpp \
    adb_trace.cpp \
    adb_utils.cpp \
    fdevent.cpp \
    sockets.cpp \
    transport.cpp \
    transport_local.cpp \
    transport_usb.cpp \
    diagnose_usb.cpp \

LIBADB_CFLAGS := \
    $(ADB_COMMON_CFLAGS) \
    -fvisibility=hidden \

LIBADB_linux_CFLAGS := \
    $(ADB_COMMON_linux_CFLAGS) \

LIBADB_linux_SRC_FILES := \
    get_my_path_linux.cpp \
    sysdeps_unix.cpp \
    usb_linux.cpp \

LOCAL_LIBADB_CFLAGS := $(LIBADB_CFLAGS) -DADB_HOST=1

CPPFLAGS := $(LOCAL_LIBADB_CFLAGS) \
    $(ADB_COMMON_linux_CFLAGS)

LIBADB_SRCS = \
    $(LIBADB_SRC_FILES) \
    $(LIBADB_linux_SRC_FILES) \
    adb_auth_host.cpp \

LIBADB_OBJS := $(LIBADB_SRCS:.cpp=.o)

libadb: $(LIBADB_OBJS)
	$(AR) -crv $@.a $(LIBADB_OBJS)


LOCAL_LDLIBS_linux := -lrt -ldl -lpthread -lstdc++


LOCAL_ADB_SRC_FILES += \
    adb_client.cpp \
    bugreport.cpp \
    client/main.cpp \
    console.cpp \
    commandline.cpp \
    file_sync_client.cpp \
    line_printer.cpp \
    services.cpp \
    shell_service_protocol.cpp \

LOCAL_ADB_CFLAGS := \
    $(ADB_COMMON_CFLAGS) \
    -D_GNU_SOURCE \
    -DADB_HOST=1 \

LOCAL_CFLAGS_linux := \
    $(ADB_COMMON_linux_CFLAGS) \

ADB_SRCS = \
    $(LOCAL_ADB_SRC_FILES) \

CPPFLAGS := $(LOCAL_ADB_CFLAGS) $(LOCAL_CFLAGS_linux)

CPPFLAGS+= \
    -DHAVE_FORKEXEC=1 \
    -DHAVE_SYMLINKS \
    -DHAVE_TERMIO_H \
    -DHAVE_SYS_SOCKET_H \
    -D_XOPEN_SOURCE \
    -D_Nonnull= \
    -D_Nullable= \
    -I. \
    -I/usr/local/include/ \
    -I../base/include \
    -I../include \
    -I../../../boringssl/include

ADB_OBJS += $(LOCAL_ADB_SRC_FILES:.cpp=.o)

LDFLAGS := -L. -L../../../boringssl/build/crypto -L../../../boringssl/build/ssl

LOCAL_LDLIBS_linux += -ladb -lbase -llog -lcrypto -lssl

HARDWARE_PLATFORM := $(shell uname -i)

ifeq (x86_64,$(HARDWARE_PLATFORM))
    LOCAL_LDLIBS_linux += -lm
endif

ifeq (x86,$(HARDWARE_PLATFORM))
    LOCAL_LDLIBS_linux += -lm
endif

all: adb
 
adb: $(ADB_OBJS) libadb libbase
	$(LD) -o $@ $(LDFLAGS) $(ADB_OBJS) $(LOCAL_LDLIBS_linux)
 
clean:
	rm -rf $(ADB_OBJS) $(LIBADB_OBJS) $(LIBBASE_OBJS) adb libadb.a libbase.a
